;;; srecode-el.srt --- Templates for Emacs Lisp mode

;; Copyright (C) 2007, 2008 Eric M. Ludlam

;; Author: Eric Ludlam <zappo@gnu.org>
;; X-RCS: $Id$

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or (at
;; your option) any later version.

;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

set escape_start "$"
set escape_end "$"

set mode "emacs-lisp-mode"

set comment_start  ";;;"
set comment_prefix  ";;"
set comment_end  ""

set DOLLAR "$"

context file

template empty :user :time :file
"Insert a skeleton for an Emacs Lisp file."
----
$>:filecomment$
;;; Commentary:
;;
;; $^$

;;; Code:

(provide '$FILE$)
;;; $FILENAME$ ends here

----

template major-mode :file
"Insert the framework needed for a major mode."
----
(defgroup $?MODESYM$ nil
  "$MODESYM$ group."
  :group 'langauges)

(defvar $MODESYM$-mode-syntax-table
  (let ((table (make-syntax-table (standard-syntax-table))))
    (modify-syntax-entry ?\; ". 12"  table) ;; SEMI, Comment start ;;
    (modify-syntax-entry ?\n ">"     table) ;; Comment end
    (modify-syntax-entry ?\" "\""    table) ;; String
    (modify-syntax-entry ?\- "_"     table) ;; Symbol
    (modify-syntax-entry ?\\ "\\"    table) ;; Quote
    (modify-syntax-entry ?\` "'"     table) ;; Prefix ` (backquote)
    (modify-syntax-entry ?\' "'"     table) ;; Prefix ' (quote)
    (modify-syntax-entry ?\, "'"     table) ;; Prefix , (comma)
    
    table)
  "Syntax table used in $MODESYM$ macro buffers.")

(defvar $MODESYM$-font-lock-keywords
  '(
    )
  "Keywords for use with srecode macros and font-lock.")

(defvar $MODESYM$-map
  (let ((km (make-sparse-keymap)))
    (define-key km "\C-c\C-c" '$MODESYM$-do-something)
    km)
  "Keymap used in $MODESYM$.")

(defcustom $MODESYM$-mode-hook nil
  "*Hook run when $MODESYM$ starts."
  :group '$MODESYM$
  :type 'hook)

;;;###autoload
(defun $MODESYM$-mode ()
  "Major-mode for $MODESYM$ buffers."
  (interactive)
  (kill-all-local-variables)
  (setq major-mode '$MODESYM$-mode
        mode-name "$?MODENAME$"
	comment-start ";;"
	comment-end "")
  (set (make-local-variable 'comment-start-skip)
       "\\(\\(^\\|[^\\\\\n]\\)\\(\\\\\\\\\\)*\\);+ *")
  (set-syntax-table $MODESYM$-mode-syntax-table)
  (use-local-map $MODESYM$-map)
  (set (make-local-variable 'font-lock-defaults)
       '($MODESYM$-font-lock-keywords
         nil  ;; perform string/comment fontification
         nil  ;; keywords are case sensitive.
         ;; This puts _ & - as a word constituant,
         ;; simplifying our keywords significantly
         ((?_ . "w") (?- . "w"))))
  (run-hooks '$MODESYM$-hook)
  )

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.$?MODEEXTENSION$$DOLLAR$" . $MODESYM$-mode))
----

template section-comment
"Insert a comment that separates sections of an Emacs Lisp file."
----

;;; $^$
;;

----
bind "s"

context declaration

prompt INTERACTIVE "Is this an interactive function? " default "  (interactive)\n" read y-or-n-p
prompt NAME "Name: " default "PRENAME"

template function :el
"Insert a defun outline."
----
(defun $?NAME$ ()
  ""
$?INTERACTIVE$  $^$
  )
----
bind "f"

template variable :el
"Inert a variable."
----
(defvar $?NAME$ $^$
  "")
----
bind "v"

template variable-const :el
"Inert a variable."
----
(defconst $?NAME$ $^$
  "")
----

template variable-option :el :el-custom
"Inert a variable created using defcustom."
----
(defcustom $?NAME$ nil
  "* "
  :group $GROUP$
  :type )
----
bind "o"

template type :el
"Insert a new class."
----
(defclass $?NAME$ ()
   (($?ARG1$ :initarg :$ARG1$
             :documentation
	     "$^$")
   )
   "Class $NAME$ ")
----
bind "c"

template method :el :ctxt
"Insert a new method."
----
(defmethod $?NAME$ ((this $?PARENT$))
  "THIS"
  $^$
  )
----
bind "m"

context classdecl

prompt NAME "Slot Name: "

template variable :indent
"A field in a class."
----
($?NAME$ :initarg :$NAME$
	 :initform nil
	 :type list
	 :documentation
	 "")

----
bind "s"


;; end


